class _ListNode(object):
    def __init__(self, val):
        self.val = val
        self.next = None

class LinkedList(object):
    def __init__(self):
        self._head = None
        self._size = 0
        self._tail = None
    
    def get(self, index):
        """
        Get the value of the index-th node in the linked list. If the index is invalid, return -1.
        :type index: int
        :rtype: int
        """
        if index < 0 or index >= self._size: 
            return -1
        return self._get(index).val

    def _get(self, index): 
        # assuming the index is valid, aka index is within [0, self._size)
        node = self._head
        for i in range(index):
            node = node.next
        return node 
    
    def addAtHead(self, val):
        """
        Add a node of value val before the first element of the linked list. 
        After the insertion, the new node will be the first node of the linked list.
        :type val: int
        :rtype: None
        """
        if self._size == 0:
            self._head = self._tail = _ListNode(val)
        else:
            new_head = _ListNode(val)
            new_head.next = self._head
            self._head = new_head
        self.size += 1
    
    def addAtTail(self, val):
        """
        Append a node of value val to the last element of the linked list.
        :type val: int
        :rtype: None
        """
        if self._size == 0:
          self._head = self._tail = _ListNode(val)
        else:
          self._tail.next = _ListNode(val)
          self._tail = self._tail.next
        self._size += 1
    
    def addAtIndex(self, index, val):
        """
        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.
        :type index: int
        :type val: int
        :rtype: None
        """
        if index < 0 or index > self._size:
          return 
        if index == 0:
          self.addAtHead(val)
        else:
          new_node = _ListNode(val)
          node = self._get(index - 1)
          new_node.next = node.next 
          node.next = new_node
        self._size += 1

    def deleteAtIndex(self, index):
        """
        Delete the index-th node in the linked list, if the index is valid.
        :type index: int
        :rtype: None
        """
        if index < 0 or index >= self._size:
          return
        if index == 0:
          new_head = self._head.next
          self._head.next = None
          self._head = new_head
          # if the one deleted is the the only node 
          if not self._head:
            self._tail = None
        else:
          pre_node = self._get(index - 1)
          node = pre_node.next
          pre_node.next = node.next
          node.next = None
          if index == self._size - 1:
            self._tail = None
        self._size -= 1